import boto3
import pytest
from moto import mock_{{ service }}
from tests.utils import random_str

@pytest.fixture
def {{ service }}_client(aws_setup):
    with mock_{{ service }}():
        yield boto3.client("{{ service }}")


@pytest.fixture
def {{ service}}_resource(aws_setup):
    with mock_{{ service }}():
        yield boto3.resource("{{ service }}")

# ============================
# WAITER
# ============================

{% for item in waiters %}
@pytest.fixture
def gen_{{ item["snake_name"]}}_waiter({{ service }}_client):
    return {{ service }}_client.get_waiter("{{ item['snake_name'] }}")
{% endfor %}

# ============================
# PAGINATOR
# ============================

{% for item in paginators %}
@pytest.fixture
def gen_{{ item["snake_name"]}}_paginator({{ service }}_client):
    return {{ service }}_client.get_paginator("{{ item['snake_name'] }}")
{% endfor %}

# ============================
# RESOURCE
# ============================

{% for item in resources %}
@pytest.fixture
def gen_{{ item["snake_name"]}}({{ service }}_resource):
    return {{ service }}_resource.{{ item['stub_class'] }}(random_str())
{% endfor %}

# ============================
# COLLECTIONS
# ============================

{% for item in collections %}
@pytest.fixture
def gen_{{ item["snake_name"]}}({{ item["fixture"] }}):
    return {{ item["fixture"] }}.{{ item["field"]}}.all()
{% endfor %}